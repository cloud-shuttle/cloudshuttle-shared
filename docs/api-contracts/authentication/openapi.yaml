openapi: 3.0.3
info:
  title: CloudShuttle Authentication API
  version: 0.2.0
  description: |
    Authentication and authorization API for CloudShuttle services.

    ## Features
    - JWT token management
    - Multi-factor authentication
    - Password policies
    - Session management
    - Role-based access control

  contact:
    name: CloudShuttle Team
    email: team@cloudshuttle.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.cloudshuttle.com/auth
    description: Production server
  - url: https://staging-api.cloudshuttle.com/auth
    description: Staging server
  - url: http://localhost:8080/auth
    description: Local development server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Authentication service health check
      description: Check if the authentication service is healthy and operational
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealth'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: User login
      description: Authenticate a user with username/password and return access tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refresh:
    post:
      summary: Refresh access token
      description: Exchange a refresh token for new access/refresh tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: User logout
      description: Invalidate the current session and tokens
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me:
    get:
      summary: Get current user profile
      description: Retrieve the current authenticated user's profile information
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /password/change:
    post:
      summary: Change user password
      description: Change the current user's password
      tags:
        - User Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request or password policy violation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mfa/setup:
    post:
      summary: Setup multi-factor authentication
      description: Generate MFA setup information for the current user
      tags:
        - MFA
      security:
        - BearerAuth: []
      responses:
        '200':
          description: MFA setup information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaSetupResponse'
        '400':
          description: MFA already enabled or not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mfa/verify:
    post:
      summary: Verify MFA code
      description: Verify an MFA code during setup or login
      tags:
        - MFA
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaVerificationRequest'
      responses:
        '200':
          description: MFA code verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid MFA code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sessions:
    get:
      summary: List user sessions
      description: Get a list of active sessions for the current user
      tags:
        - Session Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessions'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Revoke session
      description: Revoke a specific user session
      tags:
        - Session Management
      security:
        - BearerAuth: []
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
          description: Session ID to revoke
      responses:
        '200':
          description: Session revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from /login endpoint

  schemas:
    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        version:
          type: string
      required:
        - status
        - message
        - timestamp

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Machine-readable error code
            message:
              type: string
              description: Human-readable error message
            details:
              type: object
              description: Additional error details
            retryable:
              type: boolean
              description: Whether the operation can be retried
          required:
            - code
            - message
      required:
        - error

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        timestamp:
          type: string
          format: date-time
      required:
        - success
        - message

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username or email address
        password:
          type: string
          format: password
        remember_me:
          type: boolean
          description: Whether to extend session duration
          default: false
      required:
        - username
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
      required:
        - refresh_token

    AuthTokens:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token for obtaining new access tokens
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 3600
        refresh_expires_in:
          type: integer
          description: Refresh token expiration time in seconds
          example: 604800
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
        - refresh_expires_in

    UserProfile:
      type: object
      properties:
        user_id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        tenant_id:
          type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        mfa_enabled:
          type: boolean
        last_login:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user_id
        - username
        - tenant_id

    PasswordChangeRequest:
      type: object
      properties:
        current_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
        confirm_password:
          type: string
          format: password
      required:
        - current_password
        - new_password
        - confirm_password

    MfaSetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: TOTP secret key
        qr_code_url:
          type: string
          description: URL for QR code generation
        backup_codes:
          type: array
          items:
            type: string
          description: Backup recovery codes
      required:
        - secret
        - qr_code_url

    MfaVerificationRequest:
      type: object
      properties:
        code:
          type: string
          description: MFA verification code
        method:
          type: string
          enum: [totp, backup_code]
          default: totp
      required:
        - code

    UserSessions:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/UserSession'
        total_count:
          type: integer
      required:
        - sessions

    UserSession:
      type: object
      properties:
        session_id:
          type: string
        ip_address:
          type: string
        user_agent:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        is_current:
          type: boolean
      required:
        - session_id
        - created_at
        - expires_at
