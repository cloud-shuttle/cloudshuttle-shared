name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  rust-security:
    name: Rust Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo audit with advisory database update
      if: github.event_name == 'schedule'
      run: |
        cargo audit
        cargo audit --db ./advisory-db

  typescript-security:
    name: TypeScript Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd typescript
        npm ci

    - name: Run npm audit
      run: |
        cd typescript
        npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=typescript/package.json

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        cargo install cargo-deny
        cd typescript && npm ci

    - name: Run cargo deny
      run: cargo deny check

    - name: Check for outdated dependencies
      run: |
        cargo outdated --exit-code 1 || true
        cd typescript && npm outdated || true

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Build test container
      run: |
        docker build -f Dockerfile.test -t test-image .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'test-image'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-license
      run: cargo install cargo-license

    - name: Check licenses
      run: |
        cargo license --json > licenses.json
        # Check for forbidden licenses
        if jq -e '.[] | select(.license | IN("MS-PL", "WTFPL", "CC0"))' licenses.json > /dev/null; then
          echo "Forbidden license detected!"
          exit 1
        fi

    - name: Check TypeScript licenses
      run: |
        cd typescript
        npx license-checker --json > licenses.json
        # Check for license compatibility
